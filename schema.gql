# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Faculty {
  id: ID!
  slug: String!
  title: String!
  courses(where: CourseWhereInput, orderBy: [CourseOrderByInput!], cursor: CourseWhereUniqueInput, take: Int = 10, skip: Int = 0): [Course!]!
  learningPaths(where: LearningPathWhereInput, orderBy: [LearningPathOrderByInput!], cursor: LearningPathWhereUniqueInput, take: Int = 10, skip: Int = 0): [LearningPath!]!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: StringFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  description: StringFilterInput
  goals: StringListFilterInput
  level: CourseLevelFilterInput
  url: StringFilterInput
  badgeUrl: StringFilterInput
  teacher: TeacherWhereInput
  faculty: FacultyWhereInput
  learningPaths: LearningPathListRelationFilterInput
  reviews: ReviewListRelationFilterInput
}

input StringFilterInput {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringFilterInput
  mode: QueryMode
  search: String
}

enum QueryMode {
  default
  insensitive
}

input StringListFilterInput {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input CourseLevelFilterInput {
  equals: CourseLevel
  in: [CourseLevel!]
  notIn: [CourseLevel!]
  not: CourseLevelFilterInput
}

"""Course level"""
enum CourseLevel {
  """Course level basic"""
  BASICO

  """Course level intermediate"""
  INTERMEDIO

  """Course level advanced"""
  AVANZADO
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  username: StringFilterInput
  name: StringFilterInput
  description: StringFilterInput
  url: StringFilterInput
  avatarUrl: StringFilterInput
  courses: CourseListRelationFilterInput
}

input CourseListRelationFilterInput {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input FacultyWhereInput {
  AND: [FacultyWhereInput!]
  OR: [FacultyWhereInput!]
  NOT: [FacultyWhereInput!]
  id: StringFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  courses: CourseListRelationFilterInput
  learningPaths: LearningPathListRelationFilterInput
}

input LearningPathListRelationFilterInput {
  every: LearningPathWhereInput
  some: LearningPathWhereInput
  none: LearningPathWhereInput
}

input LearningPathWhereInput {
  AND: [LearningPathWhereInput!]
  OR: [LearningPathWhereInput!]
  NOT: [LearningPathWhereInput!]
  id: StringFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  description: StringFilterInput
  url: StringFilterInput
  badgeUrl: StringFilterInput
  isSchool: BoolFilterInput
  courses: CourseListRelationFilterInput
  faculty: FacultyWhereInput
}

input BoolFilterInput {
  equals: Boolean
  not: BoolFilterInput
}

input ReviewListRelationFilterInput {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: StringFilterInput
  course: CourseWhereInput
  reviewer: ReviewerWhereInput
  content: StringFilterInput
  rating: IntFilterInput
}

input ReviewerWhereInput {
  AND: [ReviewerWhereInput!]
  OR: [ReviewerWhereInput!]
  NOT: [ReviewerWhereInput!]
  id: StringFilterInput
  username: StringFilterInput
  name: StringFilterInput
  avatartUrl: StringFilterInput
  reviews: ReviewListRelationFilterInput
}

input IntFilterInput {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilterInput
}

input CourseOrderByInput {
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  description: SortOrder
  goals: SortOrder
  level: SortOrder
  url: SortOrder
  badgeUrl: SortOrder
  faculty: FacultyOrderByInput
  learningPaths: LearningPathOrderByRelationAggregateInput
  teacher: TeacherOrderByInput
  reviews: ReviewOrderByRelationAggregateInput
  _relevance: CourseOrderByRelevanceInput
}

enum SortOrder {
  asc
  desc
}

input FacultyOrderByInput {
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  description: SortOrder
  courses: CourseOrderByRelationAggregateInput
  learningPaths: LearningPathOrderByRelationAggregateInput
  _relevance: FacultyOrderByRelevanceInput
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder!
}

input LearningPathOrderByRelationAggregateInput {
  _count: SortOrder!
}

input FacultyOrderByRelevanceInput {
  fields: [FacultyOrderByRelevanceFieldEnum!]!
  sort: SortOrder! = asc
  search: String
}

enum FacultyOrderByRelevanceFieldEnum {
  id
  slug
  title
}

input TeacherOrderByInput {
  id: SortOrder
  username: SortOrder
  name: SortOrder
  description: SortOrder
  url: SortOrder
  avatarUrl: SortOrder
  courses: CourseOrderByRelationAggregateInput
  _relevance: TeacherOrderByRelevanceInput
}

input TeacherOrderByRelevanceInput {
  fields: [TeacherOrderByRelevanceFieldEnum!]!
  sort: SortOrder! = asc
  search: String
}

enum TeacherOrderByRelevanceFieldEnum {
  id
  username
  name
  description
  url
  avatarUrl
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder!
}

input CourseOrderByRelevanceInput {
  fields: [CourseOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum CourseOrderByRelevanceFieldEnum {
  id
  slug
  title
  description
  goals
}

input CourseWhereUniqueInput {
  id: ID
  slug: String
  url: String
}

input LearningPathOrderByInput {
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  description: SortOrder
  url: SortOrder
  badgeUrl: SortOrder
  isSchool: SortOrder
  faculty: FacultyOrderByInput
  courses: CourseOrderByRelationAggregateInput
  _relevance: LearningPathOrderByRelevanceInput
}

input LearningPathOrderByRelevanceInput {
  fields: [LearningPathOrderByRelevanceFieldEnum!]!
  sort: SortOrder! = asc
  search: String
}

enum LearningPathOrderByRelevanceFieldEnum {
  slug
  title
  description
  url
}

input LearningPathWhereUniqueInput {
  id: ID
  slug: String
  url: String
}

type LearningPath {
  id: ID!
  slug: String!
  title: String!
  description: String!
  url: String!
  badgeUrl: String!
  isSchool: Boolean!
  courses: [Course!]!
  faculty: Faculty!
}

type Review {
  id: ID!
  content: String!
  rating: Int!
  reviewer: Reviewer!
  course: Course!
}

type Teacher {
  id: ID!
  username: String!
  name: String!
  description: String
  url: String!
  avatarUrl: String!
  courses(where: CourseWhereInput, orderBy: [CourseOrderByInput!], cursor: CourseWhereUniqueInput, take: Int = 10, skip: Int = 0): [Course!]!
}

type Course {
  id: ID!
  slug: String!
  title: String!
  description: String!
  goals: [String!]!
  level: CourseLevel!
  url: String!
  badgeUrl: String!
  teacher: Teacher!
  faculty: Faculty!
  learningPaths(where: LearningPathWhereInput, orderBy: [LearningPathOrderByInput!], cursor: LearningPathWhereUniqueInput, take: Int = 10, skip: Int = 0): [LearningPath!]!
  reviews(where: ReviewWhereInput, orderBy: [ReviewOrderByInput!], cursor: ReviewWhereUniqueInput, take: Int = 10, skip: Int = 0): [Review!]!
}

input ReviewOrderByInput {
  id: SortOrder
  content: SortOrder
  rating: SortOrder
  reviewer: ReviewOrderByInput
  course: CourseOrderByInput
  _relevance: ReviewOrderByRelevanceInput
}

input ReviewOrderByRelevanceInput {
  fields: [ReviewOrderByRelevanceFieldEnum!]!
  sort: SortOrder! = asc
  search: String
}

enum ReviewOrderByRelevanceFieldEnum {
  id
  reviewerUsername
  courseSlug
  content
}

input ReviewWhereUniqueInput {
  id: ID!
  username: String!
}

type Reviewer {
  id: ID!
  username: String!
  name: String!
  avatarUrl: String!
  reviews(where: ReviewWhereInput, orderBy: [ReviewOrderByInput!], cursor: ReviewWhereUniqueInput, take: Int = 10, skip: Int = 0): [Review!]!
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: [CourseOrderByInput!], cursor: CourseWhereUniqueInput, take: Int = 10, skip: Int = 0): [Course!]!
  faculty(where: FacultyWhereUniqueInput!): Faculty!
  faculties(where: FacultyWhereInput, orderBy: [FacultyOrderByInput!], cursor: FacultyWhereUniqueInput, take: Int = 8, skip: Int = 0): [Faculty!]!
  learningPath(where: LearningPathWhereUniqueInput!): LearningPath
  learningPaths(where: LearningPathWhereInput, orderBy: [LearningPathOrderByInput!], cursor: LearningPathWhereUniqueInput, take: Int = 10, skip: Int = 0): [LearningPath!]!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: [ReviewOrderByInput!], cursor: ReviewWhereUniqueInput, take: Int = 10, skip: Int = 0): [Review!]
  reviewer(where: ReviewerWhereUniqueInput!): Reviewer
  reviewers(where: ReviewerWhereInput, orderBy: [ReviewerOrderByInput!], cursor: ReviewerWhereUniqueInput, take: Int = 10, skip: Int = 0): [Reviewer!]
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachers(where: TeacherWhereInput, orderBy: [TeacherOrderByInput!], cursor: TeacherWhereUniqueInput, take: Int = 10, skip: Int = 0): [Teacher!]!
}

input FacultyWhereUniqueInput {
  id: ID
  slug: String
}

input ReviewerWhereUniqueInput {
  id: ID
  username: String
}

input ReviewerOrderByInput {
  id: SortOrder
  username: SortOrder
  name: SortOrder
  avatarUrl: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
  _relevance: ReviewerOrderByRelevanceInput
}

input ReviewerOrderByRelevanceInput {
  fields: [ReviewerOrderByRelevanceFieldEnum!]!
  sort: SortOrder! = asc
  search: String
}

enum ReviewerOrderByRelevanceFieldEnum {
  id
  username
  name
  avatartUrl
}

input TeacherWhereUniqueInput {
  id: ID!
  username: String!
  url: String!
}